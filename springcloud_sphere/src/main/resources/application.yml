server:
  port: 8766

#spring:
#  application:
#    name: shpere
  # datasource 数据源配置内容，对应 DataSourceProperties 配置属性类
#  datasource:
#    url: jdbc:mysql://192.168.134.128:3306/atguigu_master_salve?useSSL=false&useUnicode=true&characterEncoding=UTF-8
#    driver-class-name: com.mysql.jdbc.Driver
#    username: root # 数据库账号
#    password: cjg260508119
#    type: com.alibaba.druid.pool.DruidDataSource # 设置类型为 DruidDataSource
    # Druid 自定义配置，对应 DruidDataSource 中的 setting 方法的属性
#    druid:
#      min-idle: 0 # 池中维护的最小空闲连接数，默认为 0 个。
#      max-active: 20 # 池中最大连接数，包括闲置和使用中的连接，默认为 8 个。


#  datasource:
#    driver-class-name: org.h2.Driver
#    schema: classpath:db/schema-h2.sql
#    username: root
#    password: test
#  sql:
#    init:
#      schema-locations: classpath:db/schema-h2.sql
#      data-locations: classpath:db/data-h2.sql

eureka:
  instance:
    prefer-ip-address: true  #配置是否显示ip地址,默认为false
    instance-id: ${spring.cloud.client.ip-address}:${server.port}  #注册服务列表显示ip+端口
  client:
    # 跟上面一样，需要指向Eureka服务端地址，这样才能进行注册
    service-url:
      defaultZone: http://localhost:8761/eureka

spring:
  shardingsphere:
    datasource:
#      common:
#        type: com.alibaba.druid.pool.DruidDataSource
#        driver-class-name: com.mysql.cj.jdbc.Driver
#        initial-size: 6
#        min-idle: 3
#        maxActive: 20
        # 配置获取连接等待超时的时间
#        maxWait: 60000
        # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
#        timeBetweenEvictionRunsMillis: 60000
        # 配置一个连接在池中最小生存的时间，单位是毫秒
#        minEvictableIdleTimeMillis: 300000
        #Oracle需要打开注释
        #validationQuery: SELECT 1 FROM DUAL
#       testWhileIdle: true
#        testOnBorrow: false
#        testOnReturn: false
        # 打开PSCache，并且指定每个连接上PSCache的大小
#        poolPreparedStatements: true
#        maxPoolPreparedStatementPerConnectionSize: 20
        # 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
#        filters: stat,wall,slf4j
        # 通过connectProperties属性来打开mergeSql功能；慢SQL记录
#        connectionProperties: druid.stat.mergeSql\=true;druid.stat.slowSqlMillis\=5000
#        wall:
#          multi-statement-allow: true
      # 所有数据源的名字
      names: ds-orders-0, ds-orders-1
      # 订单 orders 数据源配置 00
      ds-orders-0:
        #type: com.alibaba.druid.pool.DruidDataSource # 使用 Hikari 数据库连接池
        type: com.zaxxer.hikari.HikariDataSource # 使用 Hikari 数据库连接池
        driver-class-name: com.mysql.cj.jdbc.Driver
        jdbc-url: jdbc:mysql://192.168.134.128:3306/lab18_orders_0?useSSL=false&useUnicode=true&characterEncoding=UTF-8
        username: root
        password: cjg260508119
      # 订单 orders 数据源配置 01
      ds-orders-1:
        #type: com.alibaba.druid.pool.DruidDataSource # 使用 Hikari 数据库连接池
        type: com.zaxxer.hikari.HikariDataSource # 使用 Hikari 数据库连接池
        driver-class-name: com.mysql.cj.jdbc.Driver
        jdbc-url: jdbc:mysql://192.168.134.128:3306/lab18_orders_1?useSSL=false&useUnicode=true&characterEncoding=UTF-8
        username: root
        password: cjg260508119
    # 分片规则
    sharding:
      tables:
        # orders 表配置
        orders:
          actualDataNodes: ds-orders-0.orders_$->{[0,2,4,6]}, ds-orders-1.orders_$->{[1,3,5,7]} # 映射到 ds-orders-0 和 ds-orders-1 数据源的 orders 表们
          key-generator: # 主键生成策略
            column: id
            type: SNOWFLAKE
          database-strategy:
            inline:
              algorithm-expression: ds-orders-$->{user_id % 2}
              sharding-column: user_id
          table-strategy:
            inline:
              algorithm-expression: orders_$->{user_id % 8}
              sharding-column: user_id
        # order_config 表配置
        order_config:
          actualDataNodes: ds-orders-0.order_config # 仅映射到 ds-orders-0 数据源的 order_config 表
    # 拓展属性配置
    props:
      sql:
        show: true # 打印 SQL

# mybatis-plus 配置
mybatis-plus:
  configuration:
    # 开启驼峰
    map-underscore-to-camel-case: true
    # 关闭一级缓存
    local-cache-scope: statement
    # 关闭二级缓存
    cache-enabled: false
  # sql xml文件映射路径
  mapper-locations: classpath*:/mapper/*.xml
  # MyBaits 别名包扫描路径，通过该属性可以给包中的类注册别名
  type-aliases-package: com.chen.sphere.entity







